#
# WARNING: Please make you changes in *.ini.in file and then run buildout to install it.
#

[DEFAULT]
{% if parts.adhocracy.debug == 'True' %}debug = True  {% end %}
{% if parts.adhocracy.debug != 'True' %}debug = False {% end %}

# Uncomment and replace with the address which should receive any error reports
email_to = ${parts.adhocracy['email.to']}
smtp_server = ${parts.adhocracy['smtp_server']}
smtp_port = ${parts.adhocracy['smtp_port']}
error_email_from = ${parts.adhocracy['email.from']}

[server:main]
use = egg:Paste#http
host = ${parts.adhocracy.host}
port = ${parts.ports.main}
{% if parts.adhocracy.debug == 'True' %}use_threadpool = False  {% end %}
{% if parts.adhocracy.debug != 'True' %}use_threadpool = True {% end %}
threadpool_workers = 20

[composite:main]
use = egg:Paste#urlmap
/ = default

################### HHU: Disable diazo theming ###################

# Serve the theme from disk from /static (as set up in [composite:main])
[app:static]
use = egg:Paste#static

# Serve the Diazo-transformed content everywhere else
[pipeline:default]
pipeline = content

###################Adhocracy conf ###################

#WARNING changed name: #[app:main]

[app:content]
use = egg:adhocracy
full_stack = true
static_files = true

cache_dir = ${parts.buildout.directory}/var/data
beaker.session.key = adhocracy_state
# INSTALL: Replace this with a randomly generated hash value:
beaker.session.secret = ${parts.adhocracy.secret}
adhocracy.auth.secret = ${parts.adhocracy.secret}

# INSTALL: Use URLs like /i/meta/proposal/foo instead of
#          http://meta.adhocracy.lan:5001/proposal/foo
# If this is set, make sure to comment out beaker.session.cookie_domain
# and session.domain below.
adhocracy.relative_urls = ${parts.adhocracy.relative_urls}

# INSTALL: Insert your domain name here. Make sure to include the
# dot at the beginning of each domain to create wildcard cookies.
# Also make sure this is identical to the adhocracy.domains setting
# below.
# Should be commented out iff relative URLs are used.
{% if parts.adhocracy.relative_urls != 'True' %}beaker.session.cookie_domain = .${parts.domains.main}{% end %}
{% if parts.adhocracy.relative_urls != 'True' %}session.domain = .${parts.domains.main}{% end %}

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.session.data_dir = ${parts.buildout.directory}/var/data/sessions
adhocracy.provide_database_engine_to_beaker = True
beaker.session.type = ext:database
beaker.session.url = ${parts.adhocracy['sqlalchemy.url']}
beaker.cache.data_dir = ${parts.buildout.directory}/var/data/cache

# INSTALL: Locate your Memcached server if installed. Otherwise comment this out.
memcached.server = 127.0.0.1:${parts.ports.memcached}

# INSTALL: SQLAlchemy database URL
sqlalchemy.url = ${parts.adhocracy['sqlalchemy.url']}

# INSTALL: Uncommenting this line will delete all locally saved data and drop
# the entire database. Please only use this if you have a backup ready.
# Yes, that's a magic string.
## adhocracy.setup.drop = KILL_EM_ALL
#

adhocracy.solr.url = http://${parts.solr.host}:${parts.solr.port}/solr

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = false
{% if parts.adhocracy.debug != 'True' %}set debug = false {% end %}

# INSTALL: Set up the Adhocracy domain name. This will be used to determine the
# active instance, e.g. "Test Instance" for test.adhocracy.lan.

{% python
adhocracy_domain = parts['domains']['main']
if parts['domains'].get('main.force_port', None):
   adhocracy_domain += ':%s' % parts['ports']['main']
%}
adhocracy.domain = ${adhocracy_domain}
adhocracy.protocol = ${parts.adhocracy.protocol}

{% if parts.adhocracy.protocol == 'https' %}beaker.session.secure = true {% end %}

# INSTALL: Set a site name for all instances. This will be used as a part of
# the html <title>, notification E-Mails etc.
adhocracy.site.name = ${parts.adhocracy['site.name']}
adhocracy.language = ${parts.adhocracy.language}

# INSTALL: The site directory contains your site modifications of Adhocracy
# (e.g. logos, CSS, html pages). A skeleton site directory will be created
# by the "setup-app" paster command.
# adhocracy.site.dir = ${parts.buildout.directory}/src/adhocracy.hhu_theme/site_dir

# INSTALL: Location of your custom client (overrides adhocracy defaults)
adhocracy.client_location = ${parts.buildout.directory}/src/adhocracy.hhu_theme/

# INSTALL: A nice E-Mail address.
adhocracy.email.from = ${parts.adhocracy['email.from']}

# Show fallback icons in instance overview if no instance icon is defined
adhocracy.show_instance_fallback_icons = False

# INSTALL: Twitter. Since there is currently no option to take it out of the UI,
# you will want to use Twitter. Create an OAuth application to allow users to
# link their profiles: https://twitter.com/oauth_clients
adhocracy.twitter.username = ${parts.twitter.username}
adhocracy.twitter.key = ${parts.twitter.key}
adhocracy.twitter.secret = ${parts.twitter.secret}
adhocracy.twitter.consumer_key = ${parts.twitter.consumer_key}
adhocracy.twitter.consumer_secret = ${parts.twitter.consumer_key}

# INSTALL: Full path to a installation wide twitter profile which is used in
# follow-us link, e.g. http://twitter.com/liqd_de
adhocracy.twitter.profile_url = ${parts.twitter.profile_url}

# INSTALL: bit.ly is used as a URL shortener. Since their API requires auth, you
# can either leave the defaults here and give certain usage statistics to the
# Adhocracy developers, or you can create an account at http://api.bit.ly
#adhocracy.bitly.login =
#adhocracy.bitly.key =

# INSTALL: the AMQP message queue, i.e. RabbitMQ. Make sure to use different
# queue and exchange names for each install of Adhocracy. Queue processing is
# unable to process messages related to another database.
adhocracy.amqp.host = 127.0.0.1
#rabbitq default port is 5672
adhocracy.amqp.port = ${parts.ports.rabbitmq}
#adhocracy.amqp.event_queue = adhocracy.queue
adhocracy.amqp.event_exchange = adhocracy.exchange

# TODO: These are not currently evaluated.
#adhocracy.amqp.userid =
#adhocracy.amqp.password =

# INSTALL: If you want to use recaptcha uncomment these lines
#recaptcha.public_key = 6LcICcgSAAAAAKNYq9iM4lIpB_GSjYItF21wS4NS
#recaptcha.private_key = 6LcICcgSAAAAAEJL1zhVbX6N0TGb0zVXD_g2lXSo

# TUNING: Memcache page fragments?
adhocracy.cache_tiles = True

# adhocracy.instance = adhocracy

# INSTALL: Add an HTTP header that identifies the server we're running on
adhocracy.include_machine_name_in_header = True

# INSTALL: Feedback instance settings.
# If feedback shall be used, users need to be member of the feedback instance.
# This can be achieved with the `adhocracy.instances.autojoin` option below. If
# the feedback instance is enabled later, existing users can be added to the
# feedback instance with the following command:
#
# `bin/adhocpy src/adhocracy/scripts/add_all_users_to_instances.py etc/adhocracy.ini feedback`

adhocracy.use_feedback_instance = true
adhocracy.feedback_instance_key = feedback
adhocracy.feedback_instance_label = Feedback

# INSTALL: Instances which new users automatically join. This can be a comma
# separated list of instances, or ALL. If feedback is enabled above, the
# corresponding instance key or ALL should be part of this list.
adhocracy.instances.autojoin = feedback

# INSTALL: Read client IP addresses from X-Forwarded-For header.
adhocracy.behind_proxy = ${parts.adhocracy.behind_proxy}

# INSTALL: Store statistic information about requests in the database
adhocracy.requestlog_active = True
# ... but don't log IP addresses ('dontlog', default)
# ... but set the last 8 / 80 bits to zero ('anonymize')
# -.. but log the full IP address ('none')
adhocracy.requestlog_ipanonymization = none

# Statistics via Piwik
piwik.site =
piwik.id =

# INSTALL: Allow select users to include HTML
# If this option is set to false, we only allow markdown input.
# If it is set, we make a best effort to filter unsafe HTML, but allow iframes
# and other complex constructs.
adhocracy.allow_user_html = false


# Show all instances on the frontpage
adhocracy.startpage.instances.list_length = -1

# hide instance list in main navigation
adhocracy.hide_instance_list_in_navigation = False

# hide watchlist in main navigation and put it in user menu
adhocracy.put_watchlist_in_user_menu = False

# useful in settings where users can create instances
adhocracy.show_instance_creators = False

# show next milestones in instance overview
adhocracy.show_instance_overview_milestones = True

# number of upcoming milestones to show in instance overview
adhocracy.number_instance_overview_milestones = 3

# show newest proposals in instance overview
adhocracy.show_instance_overview_proposals = False

# hide categories in facet navigation if no proposal is assigned to it
adhocracy.hide_empty_categories_in_facet_list = True

# Show global stats (user/proposal/comment count) on frontpage
adhocracy.show_stats_on_frontpage = False

## Useful configuration options
adhocracy.enable_gender = True


# Logging configuration
[loggers]
keys = root, adhocracy, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_routes]
level = INFO
handlers =
qualname = routes.middleware
# "level = DEBUG" logs the route matched and routing variables.

[logger_adhocracy]
{% if parts.adhocracy.debug == 'True' %}level = DEBUG {% end %}
{% if parts.adhocracy.debug != 'True' %}level = INFO {% end %}
handlers =
qualname = adhocracy

[logger_sqlalchemy]
level = WARN
handlers = console
qualname = sqlalchemy.engine

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
